using System;
using System.Linq;

namespace Native.Csharp.App.Event.Event_Me
{
    class 生命游戏
    {
        public static string 游戏(string[][] 返回)
        {
    //        string[][] 返回 = 迭代(new string[][] {
    //            new[] {"〇","红","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","红","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"红","红","红","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","蓝","蓝","蓝"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","蓝","〇","〇"},
    //            new[] {"〇","〇","〇","〇","〇","〇","〇","〇","〇","〇","蓝","〇"}

    //});
            返回 = 迭代(返回);
            string 返回值 = "";
            foreach (var item in 返回)
            {
                foreach (var items in item)
                {
                    返回值 += items;
                }
                返回值 += Environment.NewLine;
            }
            return 返回值;
        }

        static string[][] 迭代(string[][] 棋盘)
        {
            int[] 邻居家 = { 0, 1, -1 };

            int 行数 = 棋盘.Count();
            int 列数 = 棋盘[0].Count();

            // 遍历面板每一个格子里的细胞
            for (int 行 = 0; 行 < 行数; 行++)
            {
                for (int 列 = 0; 列 < 列数; 列++)
                {

                    // 对于每一个细胞统计其八个相邻位置里的活细胞数量
                    int 活邻居 = 0;
                    int[] 红蓝 = new int[] { 0, 0 };

                    for (int i = 0; i < 3; i++)
                    {
                        for (int j = 0; j < 3; j++)
                        {

                            if (!(邻居家[i] == 0 && 邻居家[j] == 0))
                            {
                                // 相邻位置的坐标
                                int r = (行 + 邻居家[i]);
                                int c = (列 + 邻居家[j]);

                                // 查看相邻的细胞是否是活细胞
                                if ((r < 行数 && r >= 0) && (c < 列数 && c >= 0))
                                {
                                    switch (棋盘[r][c])
                                    {
                                        case "红":
                                        case "红死":
                                            红蓝[0]++;
                                            活邻居 += 1;
                                            break;
                                        case "蓝":
                                        case "蓝死":
                                            红蓝[1]++;
                                            活邻居 += 1;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                        }
                    }

                    // 规则 1 或规则 3 
                    if ((棋盘[行][列] == "红" || 棋盘[行][列] == "蓝") && (活邻居 < 2 || 活邻居 > 3))
                    {
                        //代表这个细胞过去是活的现在死了
                        棋盘[行][列] += "死";
                    }
                    // 规则 4
                    if (棋盘[行][列] == "〇" && 活邻居 == 3)
                    {
                        //代表这个细胞过去是死的现在活了
                        if (红蓝[0] > 红蓝[1])
                        {
                            棋盘[行][列] = "红生";
                        }
                        else if (红蓝[0] < 红蓝[1])
                        {
                            棋盘[行][列] = "蓝生";
                        }
                    }
                }
            }

            // 遍历棋盘，得到一次更新后的状态
            for (int row = 0; row < 行数; row++)
            {
                for (int col = 0; col < 列数; col++)
                {
                    if (棋盘[row][col].EndsWith("死"))
                    {
                        棋盘[row][col] = "〇";
                    }
                    else if (棋盘[row][col].EndsWith("生"))
                    {
                        棋盘[row][col] = 棋盘[row][col].TrimEnd('生');
                    }
                }
            }
            return 棋盘;
        }
    }
}
